from mathutils import Vector, Matrix
from mathutils.noise import random, seed_set
import bpy

bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)          # Deletes previous configuration before creating again

context = bpy.context
scene = context.scene

for c in scene.collection.children:
    scene.collection.children.unlink(c)
    
for c in bpy.data.collections:
    if not c.users:                                   # Creates scene
        bpy.data.collections.remove(c)
        


s = 0.5  # Diameter of the scater pegs

rgapx = 1 # Distance between pegs to the right in x direction

gapz = 1.27 # Distance between pegs in z direction

lgapx = 1 # Distance between pegs to the left in x direction

pegs = 100
n = 15  # Number of rows of pegs
slotn = 24 # Number of bins

fact = 1.5 # minimum size factor of particle between each peg to stop blockage( should be greater than 1 eg. 1.5)

cube = 0.25 # Diameter of paricle

cubex = 26 # Nuber of x rows of particles
cubez =  60  # Nuber of z rows of particles


l = n*gapz*4.75 #lenght of the board
w = (n*lgapx + rgapx*n) #width of the board
w2 = (n*lgapx + rgapx*n)*1.5
bret = cube*1.05 #breth of the board

ramp = l*0.5 # Lenght of funnel

x = 0   # Default x position
y = -bret*0.5 # Default y position
z = l*0.6     # Default z position

bin_collection = bpy.data.collections.new('bins')
bpy.context.scene.collection.children.link(bin_collection) # Creates collection for the bins

#Code that constucts the back board
bpy.ops.mesh.primitive_cube_add(size=1, location=(0 , bret*0.5, l*0.5))
bpy.ops.transform.resize(value=(w2, bret, l), constraint_axis=(True, True, True))
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001

#Code that constucts the front board
bpy.ops.mesh.primitive_cube_add(size=1, location=(0 , -bret*1.5, l*0.5))
bpy.ops.transform.resize(value=(w2, bret, l), constraint_axis=(True, True, True))
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001

#Code that constucts the side wall
bpy.ops.mesh.primitive_cube_add(size=1, location=(0 - (n)*lgapx, y, z*0.5))
bpy.ops.transform.resize(value=(cube*0.15, bret, z), constraint_axis=(True, True, True))
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001
bpy.context.object.rigid_body.friction = 0
obj = bpy.context.object
bin_collection.objects.link(obj)

#Code that constucts the second side wall
bpy.ops.mesh.primitive_cube_add(size=1, location=(0 + (n)*rgapx, y, z*0.5))
bpy.ops.transform.resize(value=(cube*0.15, bret, z), constraint_axis=(True, True, True))
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001
bpy.context.object.rigid_body.friction = 0
obj = bpy.context.object
bin_collection.objects.link(obj)

#Code that constucts the floor board
bpy.ops.mesh.primitive_cube_add(size=1, location=(0, 0, -bret*0.5))
bpy.ops.transform.resize(value=(w2, bret*5, bret), constraint_axis=(True, True, True))
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001

#Code that constucts the  1st ramp
bpy.ops.mesh.primitive_cube_add(size=1, location=(x - 1.5*cube - 0.5*ramp*0.72, y, z + 1.5*gapz + ramp*0.5*0.72))
bpy.ops.transform.resize(value=(ramp, bret, s), constraint_axis=(True, True, True))
bpy.ops.transform.rotate(value=0.7853981, orient_axis='Y', orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', constraint_axis=(True, True, True),)
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001
bpy.context.object.rigid_body.friction = 0

#Code that constucts the  2nd ramp
bpy.ops.mesh.primitive_cube_add(size=1, location=(x + 1.5*cube + 0.5*ramp*0.72, y, z + 1.5*gapz + ramp*0.5*0.72))
bpy.ops.transform.resize(value=(ramp, bret, s), constraint_axis=(True, True, True))
bpy.ops.transform.rotate(value=-0.7853981, orient_axis='Y', orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', constraint_axis=(True, True, True),)
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0001
bpy.context.object.rigid_body.friction = 0

for a in range (1, slotn): # Loop that generate the number of bins specificed
    bpy.ops.mesh.primitive_cube_add(size=1, location=(-n*lgapx + (w/slotn)*a, y, z - n*gapz - ((z - n*gapz)*0.5)))
    bpy.ops.transform.resize(value=(cube*0.15, bret, z - n*gapz), constraint_axis=(True, True, True))
    bpy.ops.rigidbody.object_add()
    bpy.context.object.rigid_body.type = 'PASSIVE'
    bpy.context.object.rigid_body.use_margin = True
    bpy.context.object.rigid_body.collision_margin = 0.0001
    bpy.context.object.rigid_body.friction = 0
    obj = bpy.context.object
    bin_collection.objects.link(obj)
    


n = 15 # Reastablishes the lenght of rows of scatter pegs

# Specify parameters
seed = 0
xmin = -(n-s)*lgapx # Max x positions to the left
xmax =  (n-s)*rgapx  #  Max x positions to the right
ymin = (z - gapz*(n-0.5)) # Max z positions 
ymax = z
radius = s*0.5
num_circles = pegs
max_tries = 10000

# Init
seed_set(seed)
sx = xmax - xmin - 2 * radius
sy = ymax - ymin - 2 * radius
xminm = xmin + radius
yminm = ymin + radius
existing_locations = []
sce = bpy.context.scene
bpy.ops.mesh.primitive_cylinder_add(location=(x, y, z), depth=bret, radius=radius)
bpy.ops.transform.rotate(value=2*0.7853981, orient_axis='X', orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', constraint_axis=(True, True, True),)
ref_circle = bpy.context.object
bpy.ops.rigidbody.object_add()
bpy.context.object.rigid_body.type = 'PASSIVE'
bpy.context.object.rigid_body.use_margin = True
bpy.context.object.rigid_body.collision_margin = 0.0
bpy.context.object.rigid_body.friction = 0.25
bpy.context.object.rigid_body.restitution = 0.25



# Loop
for i in range(num_circles):
    j = 0
    searchOn = True
    while searchOn:
        if j > max_tries: 
            print("Placed", i, "of", num_circles)
            bpy.ops.object.select_all(action='DESELECT')
            ref_circle.select_set(True)
            bpy.ops.object.delete()
            raise ValueError('Found no more room for another circle')
            break
        j += 1
        new_location = (xminm + random() * sx, y,
                        yminm + random() * sy
                        )

        for existing_location in existing_locations:
            if (Vector(existing_location) - Vector(new_location)).length < (2 * radius + s*fact):
                break
        else:
            new_circle = ref_circle.copy()
            new_circle.location = new_location
            sce.collection.objects.link(new_circle)
            existing_locations.append(new_location)
            searchOn = False

ref_circle.select_set(True)
context.view_layer.update()

# Create a new collection for physics objects
sphere_collection = bpy.data.collections.new('spheres')
bpy.context.scene.collection.children.link(sphere_collection)
for b in range (1, cubex):  # Loops that generate the number of particles specificed along a single row only
        bpy.ops.mesh.primitive_ico_sphere_add(radius=cube*0.5, location=((-1.5*cube-ramp*0.5*0.71)+ (2*b*(1.5*cube+ramp*0.5*0.71))/cubex, y, z + 2*gapz + ramp*0.5*0.71 +1.25*cube))
        bpy.ops.rigidbody.object_add()
        bpy.context.object.rigid_body.type = 'ACTIVE'
        bpy.context.object.rigid_body.use_margin = True
        bpy.context.object.rigid_body.collision_margin = 0.0001
        bpy.context.object.rigid_body.friction = 0.0
        bpy.context.object.rigid_body.restitution = 0.25
        bpy.context.object.rigid_body.linear_damping = 0.6
        bpy.context.object.rigid_body.angular_damping = 0.3
        obj = bpy.context.object
        sphere_collection.objects.link(obj)
        
# Duplicate physics objects in z direction 
bpy.ops.object.select_same_collection(collection="spheres")
for n in range(0,cubez):
    bpy.ops.object.duplicate_move(OBJECT_OT_duplicate={"linked":False, "mode":'TRANSLATION'}, TRANSFORM_OT_translate={"value":(0, 0, 0.5), "orient_type":'GLOBAL', "orient_matrix":((1, 0, 0), (0, 1, 0), (0, 0, 1)), "orient_matrix_type":'GLOBAL'})
